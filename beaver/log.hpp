#ifndef BEAVER_LOG_HLOC_HPP
#define BEAVER_LOG_HLOC_HPP

#include "config.hpp"
#include <cstdint>
#include <cstring>
#include <cmath>
#include <limits>

namespace beaver {
// LOC::Precomputed 128-bin table over [1,2): c[i] = 1 + i/128.
  // Generated by LOC::Python with IEEE-754 double round-trip (17 sig digits).
  static const double BEAVER_C[128] = {
     1, 1.0078125, 1.015625, 1.0234375, 1.03125, 1.0390625, 1.046875, 1.0546875,
     1.0625, 1.0703125, 1.078125, 1.0859375, 1.09375, 1.1015625, 1.109375, 1.1171875,
     1.125, 1.1328125, 1.140625, 1.1484375, 1.15625, 1.1640625, 1.171875, 1.1796875,
     1.1875, 1.1953125, 1.203125, 1.2109375, 1.21875, 1.2265625, 1.234375, 1.2421875,
     1.25, 1.2578125, 1.265625, 1.2734375, 1.28125, 1.2890625, 1.296875, 1.3046875,
     1.3125, 1.3203125, 1.328125, 1.3359375, 1.34375, 1.3515625, 1.359375, 1.3671875,
     1.375, 1.3828125, 1.390625, 1.3984375, 1.40625, 1.4140625, 1.421875, 1.4296875,
     1.4375, 1.4453125, 1.453125, 1.4609375, 1.46875, 1.4765625, 1.484375, 1.4921875,
     1.5, 1.5078125, 1.515625, 1.5234375, 1.53125, 1.5390625, 1.546875, 1.5546875,
     1.5625, 1.5703125, 1.578125, 1.5859375, 1.59375, 1.6015625, 1.609375, 1.6171875,
     1.625, 1.6328125, 1.640625, 1.6484375, 1.65625, 1.6640625, 1.671875, 1.6796875,
     1.6875, 1.6953125, 1.703125, 1.7109375, 1.71875, 1.7265625, 1.734375, 1.7421875,
     1.75, 1.7578125, 1.765625, 1.7734375, 1.78125, 1.7890625, 1.796875, 1.8046875,
     1.8125, 1.8203125, 1.828125, 1.8359375, 1.84375, 1.8515625, 1.859375, 1.8671875,
     1.875, 1.8828125, 1.890625, 1.8984375, 1.90625, 1.9140625, 1.921875, 1.9296875,
     1.9375, 1.9453125, 1.953125, 1.9609375, 1.96875, 1.9765625, 1.984375, 1.9921875 };
  static const double BEAVER_INVC[128] = {
     1, 0.99224806201550386, 0.98461538461538467, 0.97709923664122134,
     0.96969696969696972, 0.96240601503759393, 0.95522388059701491, 0.94814814814814818,
     0.94117647058823528, 0.93430656934306566, 0.92753623188405798, 0.92086330935251803,
     0.91428571428571426, 0.90780141843971629, 0.90140845070422537, 0.8951048951048951,
     0.88888888888888884, 0.88275862068965516, 0.87671232876712324, 0.87074829931972786,
     0.86486486486486491, 0.85906040268456374, 0.85333333333333339, 0.84768211920529801,
     0.84210526315789469, 0.83660130718954251, 0.83116883116883122, 0.82580645161290323,
     0.82051282051282048, 0.8152866242038217, 0.810126582278481, 0.80503144654088055,
     0.80000000000000004, 0.79503105590062106, 0.79012345679012341, 0.78527607361963192,
     0.78048780487804881, 0.77575757575757576, 0.77108433734939763, 0.76646706586826352,
     0.76190476190476186, 0.75739644970414199, 0.75294117647058822, 0.74853801169590639,
     0.7441860465116279, 0.73988439306358378, 0.73563218390804597, 0.73142857142857143,
     0.72727272727272729, 0.7231638418079096, 0.7191011235955056, 0.71508379888268159,
     0.71111111111111114, 0.70718232044198892, 0.70329670329670335, 0.69945355191256831,
     0.69565217391304346, 0.69189189189189193, 0.68817204301075274, 0.68449197860962563,
     0.68085106382978722, 0.67724867724867721, 0.67368421052631577, 0.67015706806282727,
     0.66666666666666663, 0.66321243523316065, 0.65979381443298968, 0.65641025641025641,
     0.65306122448979587, 0.64974619289340096, 0.64646464646464652, 0.64321608040201006,
     0.64000000000000001, 0.63681592039800994, 0.63366336633663367, 0.63054187192118227,
     0.62745098039215685, 0.62439024390243902, 0.62135922330097082, 0.61835748792270528,
     0.61538461538461542, 0.61244019138755978, 0.60952380952380958, 0.60663507109004744,
     0.60377358490566035, 0.60093896713615025, 0.59813084112149528, 0.59534883720930232,
     0.59259259259259256, 0.58986175115207373, 0.58715596330275233, 0.58447488584474883,
     0.58181818181818179, 0.579185520361991, 0.57657657657657657, 0.57399103139013452,
     0.5714285714285714, 0.56888888888888889, 0.5663716814159292, 0.56387665198237891,
     0.56140350877192979, 0.55895196506550215, 0.55652173913043479, 0.55411255411255411,
     0.55172413793103448, 0.54935622317596566, 0.54700854700854706, 0.5446808510638298,
     0.5423728813559322, 0.54008438818565396, 0.53781512605042014, 0.53556485355648531,
     0.53333333333333333, 0.53112033195020747, 0.52892561983471076, 0.52674897119341568,
     0.52459016393442626, 0.52244897959183678, 0.52032520325203258, 0.51821862348178138,
     0.5161290322580645, 0.51405622489959835, 0.51200000000000001, 0.50996015936254979,
     0.50793650793650791, 0.50592885375494068, 0.50393700787401574, 0.50196078431372548 };
  static const double BEAVER_LOGC_HI[128] = {
     0, 0.0077821403974667192, 0.015504186507314444, 0.023167059291154146,
     0.030771658755838871, 0.038318864069879055, 0.04580953624099493, 0.053244514390826225,
     0.0606246218085289, 0.067950662225484848, 0.075223421677947044, 0.082443669438362122,
     0.089612158015370369, 0.096729626879096031, 0.10379679314792156, 0.11081436648964882,
     0.11778303608298302, 0.12470347806811333, 0.13157635927200317, 0.13840232416987419,
     0.14518200978636742, 0.15191604197025299, 0.15860503166913986, 0.16524957120418549,
     0.17185025662183762, 0.17840765789151192, 0.18492233753204346, 0.19139485433697701,
     0.19782574474811554, 0.20421554148197174, 0.21056476980447769, 0.21687394008040428,
     0.2231435514986515, 0.22937409952282906, 0.23556607216596603, 0.24171993508934975,
     0.2478361651301384, 0.2539152130484581, 0.25995752215385437, 0.26596354693174362,
     0.27193371206521988, 0.27786844968795776, 0.28376816958189011, 0.28963328897953033,
     0.29546421021223068, 0.30126132816076279, 0.30702503770589828, 0.31275571137666702,
     0.31845372915267944, 0.32411947101354599, 0.32975328713655472, 0.33535554260015488,
     0.34092658758163452, 0.34646676480770111, 0.3519764244556427, 0.35745588690042496,
     0.36290549486875534, 0.36832556128501892, 0.37371640652418137, 0.37907835096120834,
     0.38441170006990433, 0.38971675187349319, 0.39499381184577942, 0.40024316310882568,
     0.40546511113643646, 0.41065992414951324, 0.41582789272069931, 0.42096929252147675,
     0.42608439177274704, 0.43117346614599228, 0.43623676896095276, 0.44127456098794937,
     0.44628710299730301, 0.45127464085817337, 0.45623743534088135, 0.46117571741342545,
     0.46608973294496536, 0.4709797129034996, 0.47584590315818787, 0.48068852722644806,
     0.48550781607627869, 0.49030398577451706, 0.49507726728916168, 0.49982786923646927,
     0.50455601513385773, 0.50926190614700317, 0.51394575834274292, 0.51860776543617249,
     0.52324815094470978, 0.52786709368228912, 0.53246480226516724, 0.53704147040843964,
     0.54159727692604065, 0.54613243043422699, 0.55064712464809418, 0.55514150857925415,
     0.55961579084396362, 0.56407013535499573, 0.56850473582744598, 0.57291975617408752,
     0.57731536030769348, 0.58169174194335938, 0.58604905009269714, 0.59038744866847992,
     0.59470710158348083, 0.59900818765163422, 0.603290855884552, 0.60755525529384613, 
     0.61180153489112854, 0.61602987349033356, 0.62024040520191193, 0.62443329393863678, 
     0.62860865890979767, 0.63276666402816772, 0.63690745830535889, 0.6410311758518219, 
     0.6451379656791687, 0.64922794699668884, 0.65330126881599426, 0.6573580801486969, 
     0.66139848530292511, 0.66542263329029083, 0.66943065822124481, 0.6734226793050766, 
     0.67739883065223694, 0.68135923147201538, 0.68530400097370148, 0.68923328816890717 };
  static const double BEAVER_LOGC_LO[128] = { 
     0, 4.4588229809738866e-11, 2.8650810890429312e-11, -9.6197667887043536e-12, 
     -8.9085183674342261e-11, 2.3225754652855812e-10, -2.0970072900361458e-10, 1.2798605925068429e-10,
     7.9059397917191632e-12, -3.1697709734768154e-10, -4.4035951274334906e-10, -2.2728753601430896e-10, 
     6.7431676908924487e-10, -4.2054491833365404e-10, 5.3372199715351343e-10, -1.4935870595866874e-10, 
     -4.2659956123181075e-10, 4.3284391348930029e-10, -1.4832839123624098e-09, -1.3107550600466311e-09, 
     5.8130472657680343e-11, 5.558897786528405e-11, -1.4925012892241796e-09, 1.6911216871307033e-09, 
     3.0482161239575589e-10, -4.1869360756230378e-10, 9.6196853260899218e-10, -1.3373475382660871e-09, 
     -1.4181956720094036e-09, -5.3280851952663966e-11, -6.971280497314325e-10, -1.7797899265481476e-09, 
     -1.8444173965903587e-10, 1.5420167642776761e-09, -8.5319912246362151e-10, 1.7977954125392159e-09, 
     -1.2255571280039845e-09, -3.0674946471798137e-09, 2.2830716761568226e-09, 1.5653943141735738e-09, 
     3.4184218788979592e-09, 1.3154985434304933e-09, 3.5487545124723852e-09, 3.6035123218702836e-09, 
     2.6816052156597436e-09, 2.4173990031961523e-09, -2.4109864105170686e-09, -1.372770119800748e-09, 
     1.9658551453360928e-09, -2.3593340059413492e-09, -7.6408673832517593e-10, -6.7901706479744917e-10, 
     -6.1104132864642224e-10, 2.5385074597927826e-09, -1.298464502585972e-09, 2.0213788420875289e-09, 
     -1.1793868659459861e-09, -1.2631129475693115e-10, 3.2694026930180087e-09, 1.9737610990055998e-09, 
     -1.1595722715362911e-09, -7.334680085513412e-10, -3.604910425725194e-09, 1.0181870346848143e-09, 
     -3.0282720775431926e-09, 8.3575513176725735e-10, 2.4230116801859936e-09, 2.1226528867934746e-09, 
     3.5381530483213908e-09, -1.3276209576140729e-09, -2.1860346866020564e-09, -1.8307416693730261e-10, 
     -3.6888347931807175e-10, 3.2812851880059668e-09, -1.8592937744976723e-09, -2.2912552966047883e-09, 
     -3.0203661238736856e-09, 2.315291403043318e-09, 1.7117760542362248e-09, 2.1193038435285416e-09, 
     -2.9457786210329573e-10, 2.2706767577318487e-09, -4.9131015922299071e-10, 3.1998004246247547e-10, 
     -4.3814624151039538e-09, -4.3571952712539996e-09, -7.2405086370963545e-09, -1.2281268224612063e-09, 
     -7.1801619094813418e-09, -4.0614467344823879e-09, -3.3956953915392774e-09, -4.511556017661178e-09, 
     5.5067037596501223e-09, 7.1639086884900394e-09, -6.6954318755918507e-09, -1.0387525284372146e-09, 
     -2.9085409636309123e-09, 2.9298072856676072e-09, -4.7477721754063396e-10, -2.6123020413493236e-09, 
     4.7271301317763914e-09, -2.308736868350536e-09, -5.089118904066936e-09, -2.066303572689776e-09, 
     6.1632119408017161e-09, 1.9944491613799187e-09, -4.4464677495525962e-09, -5.069304309657241e-09, 
     6.2148644008885867e-09, 3.7251804974047786e-09, 4.549945642473574e-09, -5.9267433183407547e-09, 
     5.1257642574853435e-10, 5.542870051833404e-09, 3.9317102906721857e-09, 3.5691093414058628e-09, 
     -4.3055840004413426e-09, -3.7157898979955917e-10, 3.1967514191322266e-09, -7.4403369021425192e-09, 
     -3.0575600939997116e-09, -7.4520034587521877e-10, -4.2786155729501729e-09, -4.0929098998887525e-09, 
     -7.0604307955690615e-09, -6.6641122620225701e-09, 2.1252178905584174e-09, -6.9300981619946356e-09 };
namespace internals::log{
  //Numerator coefficients for MiniMax near x=1
 static const double P[]={
     0.99999999999999999984,2.5243179484844480560,2.2905566931231668366,0.89461562657105961221,
     0.13892310095024708913,0.0057112283349638324784};
  //Denominator coefficients for MiniMax near x=1
 static const double Q[]={
     1.0000000000000000000,3.0243179484844478984,3.4693823340320569110,1.8712008107589969119,
     0.47414221544030897129,0.048197392940493293520,0.0011708757538544673621};
}
  // ----------- fast log(double)  (C++11 header-only, uses pre-computed tables for |1-x|>=0.25 else a MiniMax rational) -----------
/**
 * @brief function for the fast computation of the logarithm
 * @param x: real argument >0
 * @return \f$\log(x)\f$
 */
BEAVER_NODISCARD inline double log(double x) noexcept {
    namespace  LOC=internals::log;
    // Specials (predictable branch)
    BEAVER_ASSUME(x > 0.0);
    if (x == 0.0) return -std::numeric_limits<double>::infinity();
    if (x <  0.0) return std::numeric_limits<double>::quiet_NaN();

    double y  = x - 1.0;           // small if x near 1.
if (std::fabs(y) >= 0.25){ 
    // Bit-cast
    std::uint64_t bits;
    std::memcpy(&bits, &x, sizeof(bits));

    // Extract unbiased exponent
    std::int32_t e = std::int32_t((bits >> 52) & 0x7FF);
    if (e == 0) {
        // Subnormal: normalize by 2^54 (C++11-friendly)
        x *= std::ldexp(1.0, 54);
        std::memcpy(&bits, &x, sizeof(bits));
        e = std::int32_t((bits >> 52) & 0x7FF) - 54;
    }
    const std::int32_t k = e - 1023;

    // Force mantissa into [1,2): set exponent=1023
    bits = (bits & ((std::uint64_t(1) << 52) - 1)) | (std::uint64_t(1023) << 52);
    double m;
    std::memcpy(&m, &bits, sizeof(m));


    // ---------------- 128-bin indexing: top 7 mantissa bits -> 128 buckets ---------------
    const int i128  = int((bits >> (52 - 7)) & 0x7F);
    //const double /*c=*/   BEAVER_C[i128];
    const double invc     = BEAVER_INVC[i128];
    const double log_hi   = BEAVER_LOGC_HI[i128];
    const double log_lo   = BEAVER_LOGC_LO[i128];

    // r = m / c[i] - 1, NO divide (uses precomputed reciprocal)
    const double r = std::fma(m, invc, -1.0);

    // ------------------ Original 128-bin tiny-kernel (your R6 variant) ------------------
    // log1p(r) ≈ r - r^2/2 + r^3/3 - r^4/4 + r^5/5 - r^6/6  (grouped Estrin as before)
    const double r2 = r * r;
    const double p1 = std::fma(-0.5, r2, r);                  // r - 0.5 r^2
    const double p2 = std::fma(-0.25, r2, (1.0/3.0) * r);     // (1/3) r - 0.25 r^2
    const double p3 = std::fma(-1.0/6.0, r2, 0.2 * r);        // 0.2 r - (1/6) r^2
    const double p  = std::fma(r2, std::fma(r2, p3, p2), p1); // Estrin assembly

    // Reconstruct with split tables + split ln2 (faithful rounding)
    const double LN2_HI = 0.693147180559945309417232121458176568;
    const double LN2_LO = 2.319046813846299558417771099653961509e-17;

    const double y_hi = std::fma(double(k), LN2_HI, log_hi);
    const double y_lo = std::fma(double(k), LN2_LO, log_lo + p);
    return y_hi + y_lo;
}
    //For x close to 1 use a MiniMax (range determined s.t. a (6,6) rational suffices).
    //(6,6) MiniMax approximation for 0.75<x<1.25
    // LOC::Powers (y=x-1): y^2, y^4, y^6
    double y2 = y * y;
    double y4 = y2 * y2;
    double y6 = y4 * y2;

    // Numerator p:
    // p = y*LOC::P0 + y2*(LOC::P1 + y*LOC::P2) + y4*(LOC::P3 + y*LOC::P4) + y6*LOC::P5
    double p = std::fma(y6, LOC::P[5],
               std::fma(y4, std::fma(y, LOC::P[4], LOC::P[3]),
               std::fma(y2, std::fma(y, LOC::P[2], LOC::P[1]),y * LOC::P[0])));

    // Denominator q:
    // q = LOC::Q0 + t*LOC::Q1 + t2*(LOC::Q2 + t*LOC::Q3) + t4*(LOC::Q4 + t*LOC::Q5) + t6*LOC::Q6
    double q = std::fma(y6, LOC::Q[6],
               std::fma(y4, std::fma(y, LOC::Q[5], LOC::Q[4]),
               std::fma(y2, std::fma(y, LOC::Q[3], LOC::Q[2]),
               std::fma(y,  LOC::Q[1], LOC::Q[0]))));

    // Division is fine here—latency hides across the next loop trip.
    return p/q;

}
} // namespace beaver
#endif // BEAVER_LOG_HLOC::PLOC::P
